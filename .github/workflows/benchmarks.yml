name: Benchmarks

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  RUSTFLAGS: -C debuginfo=0  # Do not produce debug symbols to keep memory usage down
  RUST_BACKTRACE: 1

jobs:
  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        # we only use macos for fast testing
        features: ["vendored", "dynamic"]
        python-version: ['3.13']
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install libjxl
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-libjxl

      - name: Put MSYS2_MinGW64 on PATH
        # there is not yet an environment variable for this path from msys2/setup-msys2
        run: echo "${{ runner.temp }}/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create virtual environment
        run: python -m venv .venv

      - name: Build dynamic linking wheel
        if: ${{ matrix.features == 'dynamic' }}
        uses: PyO3/maturin-action@v1
        env: 
          RUST_BACKTRACE: 1
        with:
          rust-toolchain: stable-x86_64-pc-windows-gnu
          target: x86_64-pc-windows-gnu
          args: --release --out ./ -i 3.13 --features dynamic
          sccache: 'true'

      - name: Run benchmarks scripts (dynamic)
        if: ${{ matrix.features == 'dynamic' }}
        run: |
          .venv/Scripts/activate
          python -m pip install delvewheel
          delvewheel repair pillow_jxl_plugin-1.3.4-cp313-cp313-win_amd64.whl
          python -m pip install ./wheelhouse/pillow_jxl_plugin-1.3.4-cp313-cp313-win_amd64.whl
          python benchmarks/benchmarks_encode.py -i test/images/bench.png -o benchmarks-results-${{ matrix.os }}-${{ matrix.features }}-py${{ matrix.python-version }}.json

      - name: Run benchmarks scripts (vendored)
        if: ${{ matrix.features == 'vendored' }}
        run: |
          .venv/Scripts/activate
          python -m pip install -e . -v
          python benchmarks/benchmarks_encode.py -i test/images/bench.png -o benchmarks-results-${{ matrix.os }}-${{ matrix.features }}-py${{ matrix.python-version }}.json
      
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: benchmarks-results-${{ matrix.os }}-${{ matrix.features }}-py${{ matrix.python-version }}
          path: benchmarks-results-${{ matrix.os }}-${{ matrix.features }}-py${{ matrix.python-version }}.json
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
    
  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up libjxl
        run: brew install jpeg-xl

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run benchmarks scripts (MacOS)
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -e . -v
          python benchmarks/benchmarks_encode.py -i test/images/bench.png -o benchmarks-results-${{ matrix.os }}-py${{ matrix.python-version }}.json
