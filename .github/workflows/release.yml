# This file is autogenerated by maturin v1.2.3
# To update, run
#
#    maturin generate-ci github
#
name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-14]
        target: ["auto"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # todo: enable for aarch64, armv7, s390x, ppc64le
      # - name: Set up QEMU
      #   if: runner.os == 'Linux'
      #   uses: docker/setup-qemu-action@v3
      #   with:
      #     platforms: all

      - name: Setup Rust
        if: runner.os != 'Linux'
        uses: hecrj/setup-rust-action@v2
        with:
          profile: minimal
          rust-version: stable
          targets: ${{ runner.os == 'Windows' && 'x86_64-pc-windows-gnu, i686-pc-windows-gnu' || 'stable'}}

      - name: Setup Rust in containers  
        if: runner.os == 'Linux'
        run: |  
          echo "CIBW_BEFORE_ALL=curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal" >> $GITHUB_ENV  
          echo "CARGO_HOME=/usr/local/" >> $GITHUB_ENV
      
      - name: Setup Libjxl (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install jpeg-xl
          echo DEP_JXL_LIB=$(brew --prefix jpeg-xl)'/lib' >> $GITHUB_ENV
          echo DEP_BROTLI_LIB=$(brew --prefix brotli)'/lib' >> $GITHUB_ENV
          echo DEP_HWY_LIB=$(brew --prefix highway)'/lib' >> $GITHUB_ENV
      
      - name: Setup Libjxl (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-libjxl

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.2
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_SKIP: '*-musllinux_i686'
          CIBW_ARCHS_LINUX: ${{ matrix.target }}
          CIBW_ENVIRONMENT_PASS_LINUX: CARGO_HOME
          CIBW_BEFORE_BUILD_WINDOWS: echo "${{ runner.temp }}/msys64/mingw64/bin" >> $GITHUB_ENV
          CIBW_CONFIG_SETTINGS_MACOS: build-args=--features=dynamic
          CIBW_CONFIG_SETTINGS_WINDOWS: build-args=--features=dynamic
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair {wheel} -w {dest_dir}"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: |
            mkdir ./tests && mkdir ./tests/images && mkdir ./tests/images/icc_profile
            cp -r {project}/tests/images/* ./tests/images
            pytest {package}/tests

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  sdist:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          rust-toolchain: 
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Pre-Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    if: ${{ github.event_name == 'release' }}
    needs: [build_wheels, sdist]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
      - name: upload to github release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            wheels-*/*.whl
          prerelease: 
      - name: Publish to TestPyPI
        if: ${{ github.event.release.prereleased }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.TESTPYPI_API_TOKEN }}
          MATURIN_REPOSITORY_URL: https://test.pypi.org/legacy/ 
        with:
          command: upload
          args: --non-interactive
      - name: Publish to PyPI
        if: ${{ !github.event.release.prereleased }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
